var documenterSearchIndex = {"docs":
[{"location":"readme/","page":"Home","title":"Home","text":"EditURL = \"https://github.com/JuliaTurkuDataScience/FdeSolver.jl/blob/main/README.md\"","category":"page"},{"location":"readme/#FdeSolver.jl:-Solving-fractional-differential-equations","page":"Home","title":"FdeSolver.jl: Solving fractional differential equations","text":"","category":"section"},{"location":"readme/","page":"Home","title":"Home","text":"(Image: Stable) (Image: CI) (Image: codecov) (Image: DOI)","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"This is a Julia package for fractional differential equations and ODEs. It provides numerical solutions for nonlinear fractional ordinary differential equations (in the sense of Caputo).","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"Related work includes the independent FractionalDiffEq Julia Package that provides solutions of differential equations with different fractional operators, and earlier tools that are available in Matlab.","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"The implemented models are generic and broadly applicable to modeling multivariate signals from a single source or collected across multiple sources. The dynamical models implemented in this package were initially developed for modeling dynamics of interacting microbial communities (Khalighi et al. 2022) but the models are more broadly applicable and applicable to studying multi-omic and host-microbiome interactions.","category":"page"},{"location":"readme/#Method","page":"Home","title":"Method","text":"","category":"section"},{"location":"readme/","page":"Home","title":"Home","text":"We implement the predictor-corrector algorithms with a sufficient convergence and accuracy, including fast Fourier transform technique that gives us high computation speed. Interested readers can also find the stability of the methods and see how to implement the methods for solving multi-term fractional differential equations.","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"Let us suppose the following initial value problem with the Caputo fractional derivative for  beta0:","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"_CD_t_0^betay(t)=f(ty(t))","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"with the initial condition:","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"y(t_0)=y_0y^(1)(t_0)=y^(1)_0y^(m-1)(t_0)=y^(m-1)_0","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"where m is the smallest integer or equal to the order of derivative.","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"We solve the problem by using predictor corrector and Newton Raphson method.","category":"page"},{"location":"readme/#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"readme/","page":"Home","title":"Home","text":"If Julia is installed correctly, you can import FdeSolver.jl as:","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"import Pkg; Pkg.add(\"FdeSolver\")","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"A few methods on its usage are explained in Examples.","category":"page"},{"location":"readme/#Acknowledgments","page":"Home","title":"Acknowledgments","text":"","category":"section"},{"location":"readme/","page":"Home","title":"Home","text":"We are grateful to all contributors. New issues and pull requests are welcome.","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"This research has received funding from","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"the Horizon 2020 Programme of the European Union within the FindingPheno project under grant agreement No 952914.\nResearch Council of Finland (grant 330887)","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"Package documentation is compiled according to the guidelines provided in PkgTutorial.jl.","category":"page"},{"location":"readme/#Publications","page":"Home","title":"Publications","text":"","category":"section"},{"location":"readme/","page":"Home","title":"Home","text":"Kindly cite this work as follows:","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"Fdesolver: A Julia package for solving fractional differential equations. M Khalighi, G Benedetti, L Lahti. ACM Transactions on Mathematical Software, 2024, doi.org/10.1145/3680280.","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"The package development is further linked with the following publications/preprints:","category":"page"},{"location":"readme/","page":"Home","title":"Home","text":"Ebola epidemic model with dynamic population and memory, F Ndaïrou, M Khalighi, and L Lahti, Chaos, Solitons \\& Fractals, 170: 113361, 2023, doi:10.1016/j.chaos.2023.113361.\nQuantifying the impact of ecological memory on the dynamics of interacting communities. M Khalighi, G Sommeria-Klein, D Gonze, K Faust, L Lahti. PLoS Computational Biology 18(6), 2022, doi:10.1371/journal.pcbi.1009396.\nThree-species Lotka-Volterra model with respect to Caputo and Caputo-Fabrizio fractional operators. M Khalighi, L Eftekhari, S Hosseinpour, L Lahti. Symmetry 13 (3):368, 2021, doi:10.3390/sym13030368.","category":"page"},{"location":"examples/#Usage-and-Applications","page":"Examples","title":"Usage and Applications","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using FdeSolver\nusing Plots, SpecialFunctions\nusing CSV, HTTP, DataFrames, Dates, StatsBase, Optim, StatsPlots, StatsPlots.PlotMeasures","category":"page"},{"location":"examples/#Example-1:-[Fractional-nonlinear-equation](https://doi.org/10.1023/B:NUMA.0000027736.85078.be)","page":"Examples","title":"Example 1: Fractional nonlinear equation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"$","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"D^\\beta y(t) = \\frac{40320}{\\Gamma(9 - \\beta)} t^{8 - \\beta} - 3 \\frac{\\Gamma(5 + \\beta / 2)}{\\Gamma(5 - \\beta / 2)} t^{4 - \\beta / 2} + \\frac{9}{4} \\Gamma(\\beta + 1) + \\left( \\frac{3}{2} t^{\\beta / 2} - t^4 \\right)^3 - \\left[ y(t) \\right]^{3 / 2} $","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For 0betaleq1  being subject to the initial condition y(0)=0, the exact solution is:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"y(t)=t^8-3t^4+beta2+94t^beta","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Inputs\ntSpan = [0, 1];     # [intial time, final time]\ny0 = 0;             # initial value\nβ = 0.9;            # order of the derivative\n\n# ODE Model\npar = β;\nF(t, y, par) = (40320 ./ gamma(9 - par) .* t .^ (8 - par) .- 3 .* gamma(5 + par / 2)\n           ./ gamma(5 - par / 2) .* t .^ (4 - par / 2) .+ 9/4 * gamma(par + 1) .+\n           (3 / 2 .* t .^ (par / 2) .- t .^ 4) .^ 3 .- y .^ (3 / 2));\n\n## Numerical solution\nt, Yapp = FDEsolver(F, tSpan, y0, β, par);\n\n# Plot\nplot(t, Yapp, linewidth = 5, title = \"Solution of a 1D fractional IVP\",\n     xaxis = \"Time (t)\", yaxis = \"y(t)\", label = \"Approximation\");\nplot!(t, t -> (t.^8 - 3 * t .^ (4 + β / 2) + 9/4 * t.^β),\n      lw = 3, ls = :dash, label = \"Exact solution\");\nsavefig(\"example1.png\"); nothing # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: example1)","category":"page"},{"location":"examples/#Example-2:-[Lotka-volterra-predator-prey](https://mc-stan.org/users/documentation/case-studies/lotka-volterra-predator-prey.html)","page":"Examples","title":"Example 2: Lotka-volterra-predator-prey","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"$","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"\\begin{align} D^{μ1}u &= (\\alpha - \\beta v) u = \\alpha u - \\beta u v \\\nD^{μ2}v &= (-\\gamma + \\delta u) v = -\\gamma v + \\delta u v \\end{align} $","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Inputs\ntSpan = [0, 25];                    # [initial time, final time]\ny0 = [34, 6];                       # initial values\nμ = [0.98, 0.99];                # order of derivatives\npar = [0.55, 0.028, 0.84, 0.026];   # model parameters\n\n# ODE Model\nfunction F(t, y, par)\n\n    α = par[1]      # growth rate of the prey population\n    β = par[2]      # rate of shrinkage relative to the product of the population sizes\n    γ = par[3]       # shrinkage rate of the predator population\n    δ = par[4]       # growth rate of the predator population as a factor of the product\n                     # of the population sizes\n\n    u = y[1]         # population size of the prey species at time t[n]\n    v = y[2]         # population size of the predator species at time t[n]\n\n    F1 = α .* u .- β .* u .* v\n    F2 = - γ .* v .+ δ .* u .* v\n\n    [F1, F2]\n\nend\n\n## Solution\nt, Yapp = FDEsolver(F, tSpan, y0, μ, par);\n\n# Plot\nplot(t, Yapp, linewidth = 5, title = \"Solution to LV model with 2 FDEs\",\n     xaxis = \"Time (t)\", yaxis = \"y(t)\", label = [\"Prey\" \"Predator\"]);\nplot!(legendtitle = \"Population of\");\nsavefig(\"example2.png\"); nothing # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: example2)","category":"page"},{"location":"examples/#Example-3:-[SIR-model](https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology)","page":"Examples","title":"Example 3: SIR model","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"One application of using fractional calculus is taking into account effects of memory in modeling including epidemic evolution. $ \\begin{align} D^{α1}S &= -\\beta IS, \\\nD^{α2}I &= \\beta IS - \\gamma I, \\\nD^{α_3}R &= \\gamma I. \\end{align} $ By defining the Jacobian matrix, the user can achieve a faster convergence based on the modified Newton–Raphson method.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Inputs\nI0 = 0.001;             # intial value of infected\ntSpan = [0, 100];       # [intial time, final time]\ny0 = [1 - I0, I0, 0];   # initial values [S0,I0,R0]\nα = [1, 1, 1];          # order of derivatives\nh = 0.1;                # step size of computation (default = 0.01)\npar = [0.4, 0.04];      # parameters [β, recovery rate]\n\n## ODE model\nfunction F(t, y, par)\n\n    # parameters\n    β = par[1]    # infection rate\n    γ = par[2]    # recovery rate\n\n    S = y[1]   # Susceptible\n    I = y[2]   # Infectious\n    R = y[3]   # Recovered\n\n    # System equation\n    dSdt = - β .* S .* I\n    dIdt = β .* S .* I .- γ .* I\n    dRdt = γ .* I\n\n    return [dSdt, dIdt, dRdt]\n\nend\n\n## Jacobian of ODE system\nfunction JacobF(t, y, par)\n\n    # parameters\n    β = par[1]     # infection rate\n    γ = par[2]     # recovery rate\n\n    S = y[1]    # Susceptible\n    I = y[2]    # Infectious\n    R = y[3]    # Recovered\n\n    # System equation\n    J11 = - β * I\n    J12 = - β * S\n    J13 =  0\n    J21 =  β * I\n    J22 =  β * S - γ\n    J23 =  0\n    J31 =  0\n    J32 =  γ\n    J33 =  0\n\n    J = [J11 J12 J13\n         J21 J22 J23\n         J31 J32 J33]\n\n    return J\n\nend\n\n## Solution\nt, Yapp = FDEsolver(F, tSpan, y0, α, par, JF = JacobF, h = h);\n\n# Plot\nplot(t, Yapp, linewidth = 5, title = \"Numerical solution of SIR model\",\n     xaxis = \"Time (t)\", yaxis = \"SIR populations\", label = [\"Susceptible\" \"Infectious\" \"Recovered\"]);\nsavefig(\"example3.png\"); nothing # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: example3)","category":"page"},{"location":"examples/#Example-4:-[Dynamics-of-interaction-of-N-species-microbial-communities](https://doi.org/10.1371/journal.pcbi.1009396)","page":"Examples","title":"Example 4: Dynamics of interaction of N species microbial communities","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The impact of ecological memory on the dynamics of interacting communities can be quantified by solving fractional form ODE systems. $ D^{βi}Xi = Xi \\left( bi fi({Xk}) - ki Xi \\right), \\quad fi({Xk}) = \\prod{\\substack{k=1 \\ k \\neq i}}^N \\frac{K{ik}^n}{K{ik}^n + Xk^n}. $","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"tSpan = [0, 50];   # time span\nh = 0.1;           # time step\nN = 20;            # number of species\nβ = ones(N);       # order of derivatives\nX0 = 2 * rand(N);  # initial abundances\n\n# parametrisation\npar = [5,\n       rand(N),\n       rand(N),\n       2 * rand(N, N),\n       N];\n\n# ODE model\nfunction F(t, x, par)\n\n    l = par[1] # Hill coefficient\n    b = par[2] # growth rates\n    k = par[3] # death rates\n    K = par[4] # inhibition matrix\n    N = par[5] # number of species\n\n    Fun = zeros(N)\n\n    for i in 1:N\n\n        # inhibition functions\n        f = prod(K[i, 1:end .!= i] .^ l ./\n             (K[i, 1:end .!= i] .^ l .+ x[ 1:end .!= i] .^l))\n\n        # System of equations\n        Fun[i] = x[ i] .* (b[i] .* f .- k[i] .* x[ i])\n\n    end\n\n    return Fun\n\nend\n\n# Solution\nt, Xapp = FDEsolver(F, tSpan, X0, β, par, h = h, nc = 3, tol = 10e-9);\n\n# Plot\nplot(t, Xapp, linewidth = 5,\n     title = \"Dynamics of microbial interaction model\",\n     xaxis = \"Time (t)\");\n     yaxis!(\"Log abundance\", :log10, minorgrid = true);\nsavefig(\"example4.png\"); nothing # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: example4)","category":"page"},{"location":"examples/#Example-5:-Fitting-orders-of-a-[COVID-19-model](https://doi.org/10.1016/j.chaos.2020.109846)","page":"Examples","title":"Example 5: Fitting orders of a COVID-19 model","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Different methods are used to adjust the order of fractional differential equation models, which helps in analyzing systems across various fields. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We use Optim.jl to demonstrate how modifying system parameters and the order of derivatives in FdeSolver can enhance the fitting of COVID-19 data. The model is as follows: $ \\begin{align} {D}t^{\\alphaS} S(t) =& -\\beta \\frac{I}{N} S - l\\beta \\frac{H}{N} S - \\beta' \\frac{P}{N} S, \\\n{D}t^{\\alphaE} E(t) =& \\beta \\frac{I}{N} S + l\\beta \\frac{H}{N} S + \\beta' \\frac{P}{N} S - \\kappa E, \\\n{D}t^{\\alphaI} I(t) =& \\kappa \\rho1 E - (\\gammaa + \\gammai) I - \\deltai I, \\\n{D}t^{\\alphaP} P(t) =& \\kappa \\rho2 E - (\\gammaa + \\gammai) P - \\deltap P, \\\n{D}t^{\\alphaA} A(t) =& \\kappa (1 - \\rho1 - \\rho2) E, \\\n{D}t^{\\alphaH} H(t) =& \\gammaa (I + P) - \\gammar H - \\deltah H, \\\n{D}t^{\\alphaR} R(t) =& \\gammai (I + P) + \\gammar H, \\\n{D}t^{\\alphaF} F(t) =& \\deltai I + \\deltap P + \\deltah H, \\end{align} $","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Model M1: fits one parameter and uses integer orders.\nModel Mf1: fits one parameter, but adjusts the derivative orders; however, all orders are equal, representing a commensurate fractional order.\nModel Mf8: fits one parameter and allows for eight distinct derivative orders, accommodating incommensurate orders for more flexibility in modeling.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Dataset subset\nrepo=HTTP.get(\"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\"); # dataset of Covid from CSSE\ndataset_CC = CSV.read(repo.body, DataFrame); # all data of confirmed\nConfirmed=dataset_CC[dataset_CC[!,2].==\"Portugal\",45:121]; #comulative confirmed data of Portugal from 3/2/20 to 5/17/20\nC=diff(Float64.(Vector(Confirmed[1,:])));# Daily new confirmed cases\n\n#preprocessing (map negative values to zero and remove outliers)\n₋Ind=findall(C.<0);\nC[₋Ind].=0.0;\noutlier=findall(C.>1500);\nC[outlier]=(C[outlier.-1]+C[outlier.-1])/2;\n\n## System definition\n\n# parameters\nβ=2.55; # Transmission coeﬃcient from infected individuals\nl=1.56; # Relative transmissibility of hospitalized patients\nβ′=7.65; # Transmission coeﬃcient due to super-spreaders\nκ=0.25; # Rate at which exposed become infectious\nρ₁=0.58; # Rate at which exposed people become infected I\nρ₂=0.001; # Rate at which exposed people become super-spreaders\nγₐ=0.94; # Rate of being hospitalized\nγᵢ=0.27; # Recovery rate without being hospitalized\nγᵣ=0.5; # Recovery rate of hospitalized patients\nδᵢ=1/23; # Disease induced death rate due to infected class\nδₚ=1/23; # Disease induced death rate due to super-spreaders\nδₕ=1/23; # Disease induced death rate due to hospitalized class\n# Define SIR model\nfunction SIR(t, u, par)\n    # Model parameters.\n\tN, β, l, β′, κ,\tρ₁,\tρ₂,\tγₐ,\tγᵢ,\tγᵣ,\tδᵢ,\tδₚ, δₕ=par\n\n    # Current state.\n    S, E, I, P, A, H, R, F = u\n\n# ODE\n    dS = - β * I * S/N - l * β * H * S/N - β′* P * S/N # susceptible individuals\n    dE = β * I * S/N + l * β * H * S/N + β′ *P* S/N - κ * E # exposed individuals\n    dI = κ * ρ₁ * E - (γₐ + γᵢ )*I - δᵢ * I #symptomatic and infectious individuals\n    dP = κ* ρ₂ * E - (γₐ + γᵢ)*P - δₚ * P # super-spreaders individuals\n    dA = κ *(1 - ρ₁ - ρ₂ )* E # infectious but asymptomatic individuals\n\tdH = γₐ *(I + P ) - γᵣ *H - δₕ *H # hospitalized individuals\n\tdR = γᵢ * (I + P ) + γᵣ* H # recovery individuals\n\tdF = δᵢ * I + δₚ* P + δₕ *H # dead individuals\n    return [dS, dE, dI, dP, dA, dH, dR, dF]\nend;\n\n#initial conditions\nN=10280000/875; # Population Size\nS0=N-5; E0=0; I0=4; P0=1; A0=0; H0=0; R0=0; F0=0;\nX0=[S0, E0, I0, P0, A0, H0, R0, F0]; # initial values\ntspan=[1,length(C)]; # time span [initial time, final time]\n\npar=[N, β,\tl,\tβ′,\tκ,\tρ₁,\tρ₂,\tγₐ,\tγᵢ,\tγᵣ,\tδᵢ,\tδₚ, δₕ]; # parameters\n\n## optimazation of β for integer order model\n\nfunction loss_1(b) # loss function\n\tpar[2]=b[1]\n\t_, x = FDEsolver(SIR, tspan, X0, ones(8), par, h = .1)\n    appX=vec(sum(x[1:10:end,[3,4,6]], dims=2))\n    rmsd(C, appX; normalize=:true) # Normalized root-mean-square error\nend;\n\np_lo_1=[1.4]; #lower bound for β\np_up_1=[4.0]; # upper bound for β\np_vec_1=[2.5]; #  initial guess for β\nRes1=optimize(loss_1,p_lo_1,p_up_1,p_vec_1,Fminbox(BFGS()),# Broyden–Fletcher–Goldfarb–Shanno algorithm\n# Result=optimize(loss_1,p_lo_1,p_up_1,p_vec_1,SAMIN(rt=.99), # Simulated Annealing algorithm (sometimes it has better perfomance than (L-)BFGS)\n\t\t\tOptim.Options(outer_iterations = 10,\n\t\t\t\t\t\t  iterations=1000,\n\t\t\t\t\t\t  show_trace=false, # turn it true to see the optimization\n\t\t\t\t\t\t  show_every=1));\np1=vcat(Optim.minimizer(Res1));\npar1=copy(par); par1[2]=p1[1];\n\n## optimazation of β and order of commensurate fractional order model\nfunction loss_F_1(pμ)\n\tpar[2] = pμ[1] # infectivity rate\n\tμ = pμ[2] # order of derivatives\n\n\t_, x = FDEsolver(SIR, tspan, X0, μ*ones(8), par, h = .1)\n    appX=vec(sum(x[1:10:end,[3,4,6]], dims=2))\n    rmsd(C, appX; normalize=:true)\nend;\n\np_lo_f_1=vcat(1.4,.5); # lower bound for β and orders\np_up_f_1=vcat(4,1); # upper bound for β and orders\np_vec_f_1=vcat(2.5,.9); #  initial guess for β and orders\nResF1=optimize(loss_F_1,p_lo_f_1,p_up_f_1,p_vec_f_1,Fminbox(LBFGS()), # LBFGS is suitable for large scale problems\n# Result=optimize(loss,p_lo,p_up,pvec,SAMIN(rt=.99),\n\t\t\tOptim.Options(outer_iterations = 10,\n\t\t\t\t\t\t  iterations=1000,\n\t\t\t\t\t\t  show_trace=false, # turn it true to see the optimization\n\t\t\t\t\t\t  show_every=1));\npμ=vcat(Optim.minimizer(ResF1));\nparf1=copy(par); parf1[2]=pμ[1]; μ1=pμ[2];\n\n## optimazation of β and order of incommensurate fractional order model\nfunction loss_F_8(pμ)\n\tpar[2] = pμ[1] # infectivity rate\n\tμ = pμ[2:9] # order of derivatives\n\tif size(X0,2) != Int64(ceil(maximum(μ))) # to prevent any errors regarding orders higher than 1\n\t\tindx=findall(x-> x>1, μ)\n\t\tμ[indx]=ones(length(indx))\n\tend\n\t_, x = FDEsolver(SIR, tspan, X0, μ, par, h = .1)\n    appX=vec(sum(x[1:10:end,[3,4,6]], dims=2))\n    rmsd(C, appX; normalize=:true)\nend;\n\np_lo=vcat(1.4,.5*ones(8)); # lower bound for β and orders\np_up=vcat(4,ones(8)); # upper bound for β and orders\npvec=vcat(2.5,.9*ones(8)); #  initial guess for β and orders\nResF8=optimize(loss_F_8,p_lo,p_up,pvec,Fminbox(LBFGS()), # LBFGS is suitable for large scale problems\n# Result=optimize(loss,p_lo,p_up,pvec,SAMIN(rt=.99),\n\t\t\tOptim.Options(outer_iterations = 10,\n\t\t\t\t\t\t  iterations=1000,\n\t\t\t\t\t\t  show_trace=false, # turn it true to see the optimization\n\t\t\t\t\t\t  show_every=1));\npp=vcat(Optim.minimizer(ResF8));\nparf8=copy(par); parf8[2]=pp[1]; μ8=pp[2:9];\n\n## plotting\nDateTick=Date(2020,3,3):Day(1):Date(2020,5,17);\nDateTick2= Dates.format.(DateTick, \"d u\");\n\nt1, x1 = FDEsolver(SIR, tspan, X0, ones(8), par1, h = .1); # solve ode model\n_, xf1 = FDEsolver(SIR, tspan, X0, μ1*ones(8), parf1, h = .1); # solve commensurate fode model\n_, xf8 = FDEsolver(SIR, tspan, X0, μ8, parf8, h = .1); # solve incommensurate fode model\n\nX1=sum(x1[1:10:end,[3,4,6]], dims=2);\nXf1=sum(xf1[1:10:end,[3,4,6]], dims=2);\nXf8=sum(xf8[1:10:end,[3,4,6]], dims=2);\n\nErr1=rmsd(C, vec(X1)); # RMSD for ode model\nErrf1=rmsd(C, vec(Xf1)); # RMSD for commensurate fode model\nErrf8=rmsd(C, vec(Xf8)); # RMSD for incommensurate fode model\n\nplot(DateTick2,X1, ylabel=\"Daily new confirmed cases in Portugal\",lw=5,\n     label=\"M1\",xrotation=rad2deg(pi/3), linestyle=:dashdot)\n    plot!(Xf1, label=\"Mf1\", lw=5)\n    plot!(Xf8,  label=\"Mf8\", linestyle=:dash, lw=5)\n    scatter!(C, label= \"Real data\",legendposition=(.85,1),legend=:false)\n\tplPortugal=bar!([\"M1\" \"Mf1\" \"Mf8\"],[Err1 Errf1 Errf8], ylabel=\"Error (RMSD)\",\n\t\tlegend=:false, bar_width=2,yguidefontsize=8,xtickfontsize=7,\n    inset = (bbox(0.04, 0.08, 70px, 60px, :right)),\n    subplot = 2,\n    bg_inside = nothing)\nsavefig(\"example5.png\"); nothing # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: example5)","category":"page"},{"location":"#API","page":"Manual","title":"API","text":"","category":"section"},{"location":"","page":"Manual","title":"Manual","text":"Let's solve some differential equations!","category":"page"},{"location":"#Package-features","page":"Manual","title":"Package features","text":"","category":"section"},{"location":"","page":"Manual","title":"Manual","text":"Solve fractional calculus problems","category":"page"},{"location":"#Function-Documentation","page":"Manual","title":"Function Documentation","text":"","category":"section"},{"location":"","page":"Manual","title":"Manual","text":"FDEsolver(F::Function, tSpan::Vector{<:Real}, y0::Union{Real, Vector{<:Real}, Matrix{<:Real}}, β::Union{Real, Vector{<:Real}}, par...; h = 2^-6, nc = 2, JF = nothing, StopIt = \"Standard\", tol = 10e-6, itmax = 100)","category":"page"},{"location":"#FdeSolver.FDEsolver-Tuple{Function, Vector{<:Real}, Union{Real, VecOrMat{<:Real}}, Union{Real, Vector{<:Real}}, Vararg{Any}}","page":"Manual","title":"FdeSolver.FDEsolver","text":"FDEsolver(F::Function, tSpan::Vector{<:Real}, y0::Union{Real, Vector{<:Real}, Matrix{<:Real}}, β::Union{Real, Vector{<:Real}}, par...; h = 2^-6, nc = 2, JF = nothing, tol = 1e-6, itmax = 100)\n\nSolves fractional differential equations with a predictor-corrector approach.\n\nArguments\n\nF::Function: the right side of the system of differential equations. It must be expressed  in the form of a function and return a vector function with the same number of  entries of order of derivatives. This function can also include a vector of  parameters: par... .\ntSpan::Vector{<:Real}: the time span along which computation is performed.\ny0::Union{Real, Vector{<:Real}, Matrix{<:Real}}: the initial values in the form of a  row vector (Vector{<:Real}) for β = 1 and a matrix (Matrix{<:Real}) for β  1,  where each column corresponds to the initial values of one differential equation and  each row to the order of derivation.\nβ::Union{Real, Vector{<:Real}}: the orders of derivation in the form of a row vector, where  each element corresponds to the order of one differential equation. It can take  decimal as well as integer values.\nJF::Function: the Jacobian of F. If not provided, the solver will evaluate the solution  without the aid of the Jacobian matrix.\npar...: additional parameters for the function F.\nh::Real: the step size of the computation.\nnc::Int64: the desired number of corrections for predictor-corrector method, when there is no Jacobian.\ntol::Float64: the tolerance of errors, the norm inf of each iteration (for NR method) or correction when nc>10 (for PC method).\nìtmax::Int64: the maximal number of iterations.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Manual","title":"Manual","text":"To access the manual of FDEsolver from the Julia REPL, type:","category":"page"},{"location":"","page":"Manual","title":"Manual","text":"?FDESolver","category":"page"}]
}
